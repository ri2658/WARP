from ultralytics import YOLO
import warnings
warnings.filterwarnings('ignore')
warnings.simplefilter('ignore')
import shutil
from _utils.iou_xywh import iou
from _utils.data_augmentations import mutate_data, random_noise_patch
import os
import pandas as pd
import time

time_start_abs = time.time()

# Mutate data (specialized data augmentation)
_dataset_dir = DATASET_PATH
_overlay_path = OVERLAY_PATH
_output_dir = OUTPUT_PATH
_model_path

# Define the overlay mutation properties
_overlay_size = (25, 25)
_a = 0.5

# Initialize model and dataframe
model = YOLO(MODEL_PATH)

# Iterate over a grid of positions
grid_size = 25
slot_width = 640 // grid_size
slot_height = 640 // grid_size

# Designate results directory
results_path = 'results'
os.makedirs(results_path, exist_ok=True)
os.chdir(results_path)

# Initialize dataframe to store detections
imagelist = [img for img in os.listdir(_dataset_dir) if ".ipynb_checkpoints" not in img] # exclude .ipynb_checkpoints
imagelist.sort()
detections = pd.DataFrame(columns=['image_id', 'bbox', 'affected'])
detections['affected'] = [0] * (len(imagelist))
detections['image_id'] = imagelist

for i in range(grid_size):

    for j in range(grid_size):
        time_start = time.time()

        # Initialize 'detectlist' to avoid length mismatch
        detectlist = []
        
        # Calculate the overlay position for this slot
        _overlay_position = (j*slot_width, i*slot_height)

        # Initialize overlay mutation bbox coordinates
        bbox_mutation = [
            float(_overlay_position[0]),
            float(_overlay_position[1]),
            float(_overlay_size[0]),
            float(_overlay_size[1])
        ]

        # Perform the data augmentation
        # mutate_data(_dataset_dir, _overlay_path, _output_dir, _overlay_size, _overlay_position)
        random_noise_patch(_dataset_dir, _output_dir, _overlay_size, _overlay_position, _a, 0, 1, 15)

        # Record predictions
        results = model.predict(_output_dir, conf=0.01, iou=0.10, imgsz=640, max_det=1, verbose=False, stream=True)

        # Record prediction bounding boxes to dataframe
        for result in results:
            boxes = result.boxes
            if len(result.boxes.xywh.cpu().tolist()) == 0:
                detectlist.append([])
            else:
                detectlist.append(boxes.xywh.cpu().tolist()[0])

        detections['bbox'] = detectlist

        # Count how many detections were affected by overlay mutation
        for m in range(len(detections)):
            _iou = 0.0
            if len(detections.loc[m, 'bbox']) != 0:
                _iou = iou(detections.loc[m, 'bbox'], bbox_mutation)
                if _iou > 0.50:
                    detections.loc[m, 'affected'] += 1

        # Paths to the old file and the new file
        shutil.rmtree(_output_dir)
        shutil.copytree(_dataset_dir, _output_dir)

        print(f'Iteration ({i},{j}) completed in {round(time.time() - time_start,2)} seconds.')
        print(f'{round((time.time() - time_start_abs)/60,2)} minutes elapsed.')

detections['p_i'] = 0.0

for n in range(len(detections)):
    detections.loc[n, 'p_i'] = detections.loc[n, 'affected'] / (grid_size ** 2)

detections.to_csv('yolov8_p_iou_0_50.csv', index=False)

print(f'All iterations completed. Results saved in directory \'{results_path}\'.')
